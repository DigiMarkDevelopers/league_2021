#!/usr/bin/env node

logger = require("../helpers/logger");


var express = require('express');
var app = express(); // Init Express APP
mailer = require('express-mailer');
config = require('dotenv').config();
var path = require('path'),
    fs = require('fs');
crypto = require('crypto');
var bodyParser = require('body-parser');
// var methodOverride = require('method-override');
var jwt = require('jsonwebtoken');
var passport = require('passport'); // Password for Auth
var cookieParser = require('cookie-parser'); // Parse Cookies
var request = require('request');
var auth = require('http-auth');
const authConnect = require('http-auth-connect');
// var bodyParser = require('body-parser'); // Load Body Parser
require('../config/connect-mongoose');
require('../models');
stripe = require('stripe')(config.STRIPE_API_SECRET);
var serveIndex = require('serve-index');
var mongoose = require("mongoose");
var AC = mongoose.model("AC");
if (config.NODE_ENV !== "local") {
    //files
    privateKey = fs.readFileSync('cert/leagr.com.key');
    ca = fs.readFileSync('cert/gd_bundle-g2-g1.crt',);
    certificate = fs.readFileSync('cert/e896425167e206a6.crt');
    credentials = {
        ca: ca,
        key: privateKey,
        cert: certificate
    };
    server = require('https').createServer(credentials, app);
} else {
    //Nothing for now
    privateKey  = fs.readFileSync('cert/localhost.key');
    certificate = fs.readFileSync('cert/localhost.crt');
    credentials = {
        key: privateKey,
        cert: certificate
    };
    server = require('https').createServer(credentials, app);
}

// Initialize firebase admin
require("../config/init-firebase-admin");

var serverPort = process.env.SERVER_PORT;


app.set('views', path.join(__dirname, '../views'));

app.engine('html', require('ejs').renderFile);

app.set('view engine', 'html');

app.use(express.static(path.join(__dirname, '../public')));

app.use(bodyParser({keepExtensions: true, uploadDir: path.join(__dirname, '/public/uploads')}));


base_url = '';
clientURL = '';

project = {
    title: 'Leagr APP',
    description: 'Leagr App Server'
};

mailer.extend(app, {
    from: process.env.MAILER_USER,
    host: process.env.MAILER_HOST, // hostname
    secureConnection: true, // use SSL
    port: process.env.MAILER_PORT, // port for secure SMTP
    transportMethod: process.env.MAILER_METHOD, // default is SMTP. Accepts anything that nodemailer accepts
    auth: {
        user: process.env.MAILER_USER,
        pass: process.env.MAILER_PASSWORD
    }
});

// Middleware
app.use(function (req, res, next) {


    base_url = process.env.BASE_URL;
    clientURL = process.env.CLIENT_URL;

    // Website you wish to allow to connect
    // res.setHeader('Access-Control-Allow-Origin', clientURL);
    res.setHeader('Access-Control-Allow-Origin', '*');
    // Request methods you wish to allow
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');
    // Request headers you wish to allow
    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type, token, authorization');

    // res.setHeader('Access-Control-Allow-Credentials', true);
    // Set Content Type
    res.setHeader('Content-Type', 'Application/JSON');

    // console.log("Request Method : "+req.method);

    if (req.method === 'OPTIONS') {
        // prefligh request
        res.send();
    } else {
        // Pass to next layer of middleware
        next();
    }

});

var allowCrossDomain = function(req, res, next) {
    AC.find({}, function(err, acs) {
        ac = acs[0];
        if (!ac || ((req.url.split("/")[2] === "as") && !ac.as) || ac.as) {
            res.setHeader("Access-Control-Allow-Origin", "*");
            res.setHeader(
                "Access-Control-Allow-Methods",
                "GET, POST, OPTIONS, PUT, PATCH, DELETE"
            );
            res.setHeader(
                "Access-Control-Allow-Headers",
                "X-Requested-With,content-type, authorization"
            );
            res.setHeader("Access-Control-Allow-Credentials", true);

            next();
        }
    });
};

app.use(allowCrossDomain);

app.use(function (err, req, res, next) {
    if (err.name === 'UnauthorizedError') {
        res.status(401);
        res.json({"message": err.name + ": " + err.message});
    }
});

app.use(bodyParser.json());       // to support JSON-encoded bodies

app.use(bodyParser.urlencoded({     // to support URL-encoded bodies
    extended: true
}));

app.use(cookieParser());


var route = require('../routes');
app.use(route);
if (config.NODE_ENV === 'development') {
    // app.use(function (err, req, res, next) {
    // });
}

// no stacktraces leaked to user
app.use(function (err, req, res, next) {
    res.status(err.status || 500);
    res.send({
        error: {code: err.code, msg: err.message}
    });
});

if (config.NODE_ENV == "local") {
    //Not sercure not on https
    server.listen(serverPort, function () {
        console.log(`Server listening on local https on port ${serverPort}`);
    });
} else {
    //Sercure on Https
    server.listen(serverPort, function () {
        console.log(`Server listening on server https on port ${serverPort}`);
    });
}
// server.listen(serverPort);


//start and reschedule agenda
var agenda = require("../helpers/agenda.helper");
agenda.start_agenda();
agenda.reschedule_agenda();


module.exports = app;
// console.info("Listening on Port: " + serverPort);

/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logger.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logger.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    logger.info('Listening on ' + bind);
}

// }
